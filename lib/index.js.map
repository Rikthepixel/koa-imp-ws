{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import http from \"http\";\nimport process from \"process\";\nimport WebSocket, { ServerOptions } from \"ws\";\nimport Koa, { Middleware } from \"koa\";\n\nimport makeDebug from \"debug\";\nconst debug = makeDebug(\"koa-imp-ws\");\n\nexport type WebSocketContext = {\n  /** @async @function\n   * @description\n   * This function checks if the upgrade headers are valid.\n   * It returns the the `WebSocket` if the upgrade was successful and `null` if it wasn't\n   *\n   * @example\n   * const socket = await ctx.ws()\n   * if (!socket) {\n   *    ctx.status = 400\n   *    ctx.body = \"This is a websocket endpoint\"\n   * }\n   *\n   * // Do stuff with socket\n   *\n   * @returns `Promise<null>` if the upgrade header is invalid\n   * @returns `Promise<WebSocket>` if the upgrade headers are valid\n   */\n  ws(): Promise<WebSocket | null>;\n  /**\n   * Exposed websocket server\n   *\n   * If the server didn't (successfully) upgrade the connection, this will be undefined.\n   */\n  wsServer?: WebSocket.Server;\n};\n\nexport type WebSocketMiddleware = Middleware<object, WebSocketContext>;\n\nexport type WebSocketMiddlwareOptions = {\n  server?: http.Server;\n  wsOptions?: ServerOptions;\n  noServerWorkaround?: boolean;\n};\n\nconst serversPatched = new WeakSet();\n\n/**\n * Creates a websocket server and upgrades a connection if `ctx.ws()` is called.\n *\n * It can be applied multiple times, the latest one will override the\n * @example\n * const app = new Koa()\n *  .use(websocket()) // Top level websocket\n *\n * app.use((ctx) => {\n *   const socket = ctx.ws() // Top level websocket\n * })\n *\n * app\n *  .use(websocket()) // Overrides top level\n *  .use((ctx) => {\n *     const socket = ctx.ws() // Override websocket\n *  })\n */\nfunction websocket(\n  optionsOrHttpServer?: WebSocketMiddlwareOptions | http.Server,\n): (\n  context: Koa.ParameterizedContext<object, WebSocketContext>,\n  next: Koa.Next,\n) => any {\n  const options: WebSocketMiddlwareOptions =\n    optionsOrHttpServer instanceof http.Server\n      ? { server: optionsOrHttpServer }\n      : optionsOrHttpServer ?? {};\n\n  if (parseInt(process.versions.node) < 10 && !options.noServerWorkaround) {\n    const server = options.server;\n    // node 9 or earlier needs a workaround for upgrade requests\n    if (!server) {\n      throw new TypeError(\n        `If you target Node 9 or earlier you must provide the HTTP server either as an option or as the second parameter.\\n` +\n          `See the readme for more instructions: https://github.com/b3nsn0w/koa-easy-ws#special-usage-for-node-9-or-earlier`,\n      );\n    }\n\n    if (!serversPatched.has(server)) {\n      serversPatched.add(server);\n      server.on(\"upgrade\", (req) =>\n        server.emit(\"request\", req, new http.ServerResponse(req)),\n      );\n      debug(\"added workaround to a server\");\n    }\n  }\n\n  debug(`websocket middleware created with property name 'wsServer`);\n\n  const wsServer = new WebSocket.Server({\n    ...options.wsOptions,\n    noServer: true,\n  });\n\n  return async function (ctx, next) {\n    debug(`websocket middleware called on route ${ctx.path}`);\n    const shouldUpgradeWs =\n      (ctx.request.headers.upgrade || \"\")\n        .split(\",\")\n        .map((s) => s.trim().toLowerCase())\n        .indexOf(\"websocket\") !== -1;\n\n    if (!shouldUpgradeWs) {\n      ctx.ws = () => Promise.resolve(null);\n      ctx.wsServer = undefined;\n\n      return await next();\n    }\n\n    debug(`websocket middleware in use on route ${ctx.path}`);\n\n    ctx.ws = async function () {\n      return new Promise<WebSocket>(function (resolve) {\n        wsServer.handleUpgrade(\n          ctx.req,\n          ctx.request.socket,\n          Buffer.alloc(0),\n          (ws) => {\n            wsServer.emit(\"connection\", ws, ctx.req);\n            resolve(ws);\n          },\n        );\n        ctx.respond = false;\n      });\n    };\n\n    ctx.wsServer = wsServer;\n\n    await next();\n  };\n}\n\nexport default websocket;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AACjB,qBAAoB;AACpB,gBAAyC;AAGzC,mBAAsB;AACtB,IAAM,YAAQ,aAAAA,SAAU,YAAY;AAqCpC,IAAM,iBAAiB,oBAAI,QAAQ;AAoBnC,SAAS,UACP,qBAIO;AACP,QAAM,UACJ,+BAA+B,YAAAC,QAAK,SAChC,EAAE,QAAQ,oBAAoB,IAC9B,uBAAuB,CAAC;AAE9B,MAAI,SAAS,eAAAC,QAAQ,SAAS,IAAI,IAAI,MAAM,CAAC,QAAQ,oBAAoB;AACvE,UAAM,SAAS,QAAQ;AAEvB,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR;AAAA;AAAA,MAEF;AAAA,IACF;AAEA,QAAI,CAAC,eAAe,IAAI,MAAM,GAAG;AAC/B,qBAAe,IAAI,MAAM;AACzB,aAAO;AAAA,QAAG;AAAA,QAAW,CAAC,QACpB,OAAO,KAAK,WAAW,KAAK,IAAI,YAAAD,QAAK,eAAe,GAAG,CAAC;AAAA,MAC1D;AACA,YAAM,8BAA8B;AAAA,IACtC;AAAA,EACF;AAEA,QAAM,2DAA2D;AAEjE,QAAM,WAAW,IAAI,UAAAE,QAAU,OAAO;AAAA,IACpC,GAAG,QAAQ;AAAA,IACX,UAAU;AAAA,EACZ,CAAC;AAED,SAAO,eAAgB,KAAK,MAAM;AAChC,UAAM,wCAAwC,IAAI,IAAI,EAAE;AACxD,UAAM,mBACH,IAAI,QAAQ,QAAQ,WAAW,IAC7B,MAAM,GAAG,EACT,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY,CAAC,EACjC,QAAQ,WAAW,MAAM;AAE9B,QAAI,CAAC,iBAAiB;AACpB,UAAI,KAAK,MAAM,QAAQ,QAAQ,IAAI;AACnC,UAAI,WAAW;AAEf,aAAO,MAAM,KAAK;AAAA,IACpB;AAEA,UAAM,wCAAwC,IAAI,IAAI,EAAE;AAExD,QAAI,KAAK,iBAAkB;AACzB,aAAO,IAAI,QAAmB,SAAU,SAAS;AAC/C,iBAAS;AAAA,UACP,IAAI;AAAA,UACJ,IAAI,QAAQ;AAAA,UACZ,OAAO,MAAM,CAAC;AAAA,UACd,CAAC,OAAO;AACN,qBAAS,KAAK,cAAc,IAAI,IAAI,GAAG;AACvC,oBAAQ,EAAE;AAAA,UACZ;AAAA,QACF;AACA,YAAI,UAAU;AAAA,MAChB,CAAC;AAAA,IACH;AAEA,QAAI,WAAW;AAEf,UAAM,KAAK;AAAA,EACb;AACF;AAEA,IAAO,cAAQ;","names":["makeDebug","http","process","WebSocket"]}